const MSG_WIFI_CONNECTED="Connected! IP: ";class ClassWifi{constructor(){if(this.Instance)return this.Instance;ClassWifi.prototype.Instance=this,this._Name="Network",this._Core,this._Ssid,this._Scan,this._Ip,this._mDNS=""}Init(nc,bus,callback){bus?this._Core=require("Esp8266.min.js").setup(bus,err=>{err?(Logger.Log(this._Name,Logger.LogLevel.ERROR,err),callback(!1)):(Logger.Log(this._Name,Logger.LogLevel.INFO,"Using ESP8266."),esp="esp8266",this.MainSequence(nc,esp,callback))}):(this._Core=require("Wifi"),Logger.Log(this._Name,Logger.LogLevel.INFO,"Found build-in library."),esp="esp32",this.MainSequence(nc,esp,callback))}MainSequence(nc,esp,callback){this.GetAPCreds(nc,pass=>{this.Connect(pass,res=>{this.SetStatic(nc,()=>{this.SetMDNS(nc,esp,()=>{this.SetNTP(nc,esp,()=>{callback(res)})})})})})}GetAPCreds(nc,callback){if(1==nc.scan)Logger.Log(this._Name,Logger.LogLevel.INFO,"Scanning the net. . ."),this._Core.scan(scn=>{this._Scan=scn;let pass=this.GetNetPassword(this._Scan);callback(pass)});else{this._Ssid=nc.accpoints[0].ssid;let pass=nc.accpoints[0].pass;Logger.Log(this._Name,Logger.LogLevel.INFO,"Net scan skipped."),callback(pass)}}Connect(pass,callback){Logger.Log(this._Name,Logger.LogLevel.INFO,`Got credentials. Attempting establish connection to ${this._Ssid}.`),this._Core.connect(this._Ssid,{password:pass},err=>{err?(Logger.Log(this._Name,Logger.LogLevel.ERROR,"Conncetion failed!"),callback(!1)):this._Core.getIP((err,info)=>{err?(Logger.Log(this._Name,Logger.LogLevel.ERROR,"Cannot get proveded IP"),callback(!1)):(this._Ip=info.ip,Logger.Log(this._Name,Logger.LogLevel.INFO,"Connected! IP: "+this._Ip),callback(!0))})})}SetStatic(nc,callback){if(1==nc.usestatic){let settings={ip:nc.staticconf.ip,gw:nc.staticconf.gw,netmask:nc.staticconf.nm};this._Core.setIP(settings,err=>{err?Logger.Log(this._Name,Logger.LogLevel.ERROR,"Failed to set static IP address"):Logger.Log(this._Name,Logger.LogLevel.INFO,`Static IP set to ${nc.staticconf.ip}`),callback()})}else Logger.Log(this._Name,Logger.LogLevel.INFO,"Static IP setup skipped!"),callback()}SetMDNS(nc,esp,callback){void 0!==nc.mdns.hostname&&nc.mdns.hostname!=this._mDNS?"esp8266"==esp?this._Core.setMDNS(nc.mdns.hostname,nc.mdns.serviceType,nc.mdns.port,err=>{err?Logger.Log(this._Name,Logger.LogLevel.ERROR,"Failed to set MDNS name!"):(this._mDNS=nc.mdns.hostname,Logger.Log(this._Name,Logger.LogLevel.INFO,`MDNS name: ${nc.mdns.hostname}.local`)),callback()}):"esp32"==esp?this._Core.setHostname(nc.mdns.hostname,()=>{this._mDNS=nc.mdns.hostname,Logger.Log(this._Name,Logger.LogLevel.INFO,`MDNS name: ${nc.mdns.hostname}.local`),callback()}):(Logger.Log(this._Name,Logger.LogLevel.WARN,"Unknown WiFi chip!"),callback()):(Logger.Log(this._Name,Logger.LogLevel.INFO,"MDNS setup skipped!"),callback())}SetNTP(nc,esp,callback){void 0!==nc.ntp.hostname?"esp8266"==esp?this.SetNTPESP8266(nc.ntp.hostname,nc.ntp.port,()=>{E.setTimeZone(nc.ntp.timezone),callback()}):"esp32"==esp&&(this.SetNTPESP32(nc.ntp.hostname,nc.ntp.timezone),E.setTimeZone(nc.ntp.timezone),Logger.Log(this._Name,Logger.LogLevel.INFO,"NTP: Time updated!"),callback()):callback()}GetNetPassword(_aps){let found,pass;return this._Scan.map(a=>a.ssid).forEach(fName=>{_aps.forEach(sName=>{fName==sName.ssid&&(this._Ssid=sName.ssid,pass=sName.pass)})}),pass}SetNTPESP32(_host,_tz){this._Core.setSNTP(_host,_tz.toString())}SetNTPESP8266(_host,_port,callback){this._Core.setUDP(_host,_port);const socket=require("dgram").createSocket("udp4");socket.on("error",err=>{Logger.Log(this._Name,Logger.LogLevel.ERROR,`NTP error: ${err.message}!`),callback()}),socket.on("message",(msg,rinfo)=>{let buffer=E.toArrayBuffer(msg);const dv=new DataView(buffer),timestamp=this.NTPtoMsecs(dv,40);setTime(timestamp/1e3),Logger.Log(this._Name,Logger.LogLevel.INFO,"NTP: Time updated!"),callback()}),socket.on("close",()=>{Logger.Log(this._Name,Logger.LogLevel.INFO,"NTP socket closed!")});let message=new Uint8Array(48);message[0]=27;for(let i=1;i<48;i++)message[i]=0;socket.send(E.toString(message),_port,_host,(err,bytes)=>{(err||48!==bytes)&&(Logger.Log(this._Name,Logger.LogLevel.ERROR,"Cannot send NTP request!"),callback())})}NTPtoMsecs(dv,offset){let seconds,fraction;return 1e3*(dv.getUint32(offset)-2208988800+dv.getUint32(offset+4)/Math.pow(2,32))}UDPHost(_host,_port){"esp8266"==esp&&this._Core.setUDP(_host,_port)}}exports=ClassWifi;